


由一张在朋友圈被调侃的图引发的思考。

![各种语言被黑](/img/WechatIMG131.jpeg)

# 当下前端的的发展“盛世”

近几年，前端技术算是日新月异，飞速发展。几乎涉及了IT技术的各个层面，从常规的老本行浏览器端，到服务端的异军 nodejs，再到桌面平台 NW / electron，现在 ReactNative 又侵入了移动端的领域。
可谓是 “大小通吃、老少皆宜~”。

看看各大技术平台的相关数据：

github 中有 20%+ 的代码仓库都是 js，提交次数、fork量更是遥遥领先。据此 JS 也是连续霸榜好几年的最受欢迎语言(仅按库语言类型)。

stackoverflow 中 javascript 的提问量也是连续两年50%+，占据第一。

由上可见 javascript 的火暴程度那是没的说。

。。。**咱们再转过来看实际应用情况。**

要说 github 是程序员的俱乐部，那么 IEEE 和 google 每年发布的语言排行榜就是各语言的试炼场了。

IEEE 从整体、趋势、应用、开源四个方面对各语言进行评分，然后得出评分。

![alt](/img/js_think/1.png)

还有国际权势统计机构结合 google 搜索量（这一处很能体现实际应用情况）对主流语言进行的排名：

~~~
    1. Java
    2. C
    3. C++
    4. Python
    5. C#
    6. PHP
    7. JavaScript
    8. Visual Basic .NET
    9. Perl
    10. Assembly language
~~~

从这来看，就不是太乐观了。连一直被黑的较惨的“世界最好语言” --- PHP 也没超过。

# 漫画的简单说明

为什么“**民间**”和“**官方**”对 javascript 的排名差距这么大呢？

最上面漫画里有个很形象的体现：

* javascript 骑士一手烟卷一手咖啡，不慌不忙很惬意 --- 自我感觉良好，什么东西都自己从0开始造 --- 任何方面都能干，结果不太理想；
* C 语言重装骑士，自身装备精良、能力强悍，极其高效和解救出公主...和她的狗、衣柜、等一切东西 --- 最能触达程序灵魂的语言；
* C# 装备华丽、出身高贵，一切都那么井井有条，最后还是加入大神 Jon Skeet 的麾下进行求助 --- 优雅但缺少一些关键点；
* java 骑士行事果断有力，一下搞定了两处城堡...但公主不在那 --- 严谨高效强大但冗余；
* go ... 一个人不允许救公主 --- 丰富的标准库，强大的内置工具，都抢了 java 的公主我还能说什么~；
* php ...>>> 不敢多说 （逃~~~）

其它的没接触过。。。

# 漫画引起的反思

当然，漫画都是夸大的，以黑为主(除了 C)，但是反应出的问题还是值得我们去思考的。

C 和 java 在实际应用中得到了广泛的使用和认可，良好的生态、一致的开发规范、高性能且稳健的企业级框架、丰富的标准类库，这些都支撑着两大开发语言巨头经久不衰。

java 几乎成了 toB 应用的标配，极其严谨的开发风格让安全、稳健几乎成了 java 的代名词，一个企业的系统不用 java 都不说意思说自己是大公司。

c 语言就更不用说，能力不比其它同行小，速度最快，连各类操作系统都是它写的，还有它干不了的事吗？

PHP 虽然常被上面两个同行黑，但在 web 盛行的今天，为 web 而生的 php 依然占据了 server 系统的表层部分，有 70% 的页面和接口经 php 输出的。(出身较低，救不了公主，但前线我还是独当一面)。

Python 在大数据、快捷编程、web方面都有着很抢眼的表现。

再来说重点：咱们的 javascript

> 既然都当成一种高级语言来说了，就不要再辩解 “js 和其它语言不一样” 之类的理由了。 

**在浏览器层面上**，是 js 专属领域，但这一方面也做的不是非常好，坑点巨多的执行环境和天生就有缺陷的设计让出生只是为了解决简单页面逻辑的 JS 很难实质上进步。
近几年，陆续出现了许多的前端框架，ember、backbone、knockout、angular、reactjs、vue 等等，种类花样繁多，但统一有一个问题：不太持久。
出现的大规模的跟一阵风，当另外一外新鲜东西出现后，又立刻倾向另一边，看着不断刷新的框架版本号、不段出现的新框架，大家都用得热火朝天。

但当你放下手中刚用新框架实现的一个 “hello world”，立刻转向另一个更新框架的 demo 时，你能得到些什么。

# 近期的经历

近期面试了些人，大多数的简历上都写着“熟悉 backbone、angular、reactjs、vue 等前端框架”，问些相关框架开发倒也能多多少少说上点什么。
但是稍微一深入问：

> eg: 
* backbone dom 操作有什么限制，为什么这样？
* angular V、C、S、M分层的意义？
* react 虚拟 dom 是什么，有什么意义？
...

没几个人能给一个靠谱的答案，我稍有点着急的问：“那你为什么要用这些框架？”。一般的回答都是“开发效率快、单页用着爽”，好点的就是“开发规范”，差点的就是“比较流行吧，大家都在用”。

我们不得不直视一个源头性的因素：JS 的门槛低 --- 至少是因历史遗留原因而被认为是这样的。

不少前端开发者没有后台复杂逻辑开发的经历，选择了前端方向，上手就写页面，而且看些资料也都能做的出来，这样产生“这东西也不难嘛~”这样的意识。
有点底子后，发现了前端框架这样一个“新大陆”，然后仿着 demo 写几个例子，调试出来后更是自信满满，直接以“资深工程师”自居。

那你可知道，这样前端框架的思想基本都是C、JAVA、php等成熟框架早就用过的？

* 视图操作作用域限制在之前任意 gui 开发中就是基本要求；
* view、controller、service、model 架构 j2ee 一直在用；
* 类似 react component 的概念和实现 php、java 也早就有了，而且是带样式、带功能、直接和后台数据交互的“增强版” component。

之前刚工作时，开发组长给我们新人说：“不要总学习用框架，真正学一门语言”。现在用到前端领域真是挺合适的。

现在的前端技术有点为了追新面追新的局面，极少数的框架原创者各立门户，不管对实际产出有多大作用，发布后必然会激起一股追赶潮流。过了这股劲，再转向另外一个框架。



1. 独当一面的能力

一个老同学找我让帮他做个博客，他是在一家顶极公司写硬件端 C 的，略有一点优越感。